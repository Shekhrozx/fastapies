{
  "FastAPI Init app": {
      "prefix": "fesinit",
      "body": [
          "from fastapi import FastAPI",
          "",
          "app = FastAPI()",
          "",
          "@app.get('/')",
          "async def index():",
          "    return {'message': 'Hello FES APP'}"
      ]
  },
  "FastAPI GET path": {
      "prefix": "fesget",
      "body": [
          "@app.get('/${1:path_name}/')",
          "def ${2:method_name}(${3:args}):",
          "    pass$0"
      ]
  },
  "async FastAPI GET path": {
      "prefix": "fesaget",
      "body": [
          "@app.get('/${1:path_name}/')",
          "async def ${2:method_name}(${3:args}):",
          "    pass$0"
      ]
  },
  "FastAPI POST path": {
      "prefix": "fespost",
      "body": [
          "@app.post('/${1:path_name}/')",
          "def ${2:method_name}(${3:args}):",
          "    pass$0"
      ]
  },
  "async FastAPI POST path": {
      "prefix": "fesapost",
      "body": [
          "@app.post('/${1:path_name}/')",
          "async def ${2:method_name}(${3:args}):",
          "    pass$0"
      ]
  },

  "FastAPI PUT path": {
    "prefix": "fesput",
    "body": [
        "@app.put('/${1:path_name}/')",
        "def ${2:method_name}(${3:args}):",
        "    pass$0"
    ]
  },
  "async FastAPI PUT path": {
      "prefix": "fesaput",
      "body": [
          "@app.put('/${1:path_name}/')",
          "async def ${2:method_name}(${3:args}):",
          "    pass$0"
      ]
  },

  "FastAPI DELETE path": {
    "prefix": "fesdel",
    "body": [
        "@app.delete('/${1:path_name}/')",
        "def ${2:method_name}(${3:args}):",
        "    pass$0"
    ]
  },
  "async FastAPI DELETE path": {
    "prefix": "fesadel",
    "body": [
        "@app.delete('/${1:path_name}/')",
        "async def ${2:method_name}(${3:args}):",
        "    pass$0"
    ]
  },
  "async function": {
      "prefix": "fesadef",
      "body": [
          "async def ${1:method_name}(${2:args}):",
          "    pass$0"
      ]
  },
  "Pydantic BaseModel": {
      "prefix": "fesbasemodel",
      "body": [
          "class ${1:ModelName}(BaseModel):",
          "    ${2:field_name}: ${3:str} = ${4:None}"
      ]
  },
  "Custom Error Handler": {
      "prefix": "feserror",
      "body": [
          "class ${1:CustomException}(Exception):",
          "    def __init__(self):",
          "        pass$0",
          "",
          "@app.exception_handler(${1:CustomException})",
          "async def custom_exception_handler(request: Request, exc: ${1:CustomException}):",
          "    return JSONResponse(",
          "        status_code=${2:status_code},",
          "        content={'message': ${3:message}}",
          "    )",
      ]
  },
  "SQLAlchemy Database": {
      "prefix": "fessqldb",
      "body": [
          "from sqlalchemy import create_engine",
          "from sqlalchemy.ext.declarative import declarative_base",
          "from sqlalchemy.orm import sessionmaker",
          "",
          "SQLALCHEMY_DATABASE_URL = '${1:db_url}'",
          "",
          "engine = create_engine(SQLALCHEMY_DATABASE_URL)",
          "",
          "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
          "",
          "Base = declarative_base()"
      ]
  },
  "SessionLocal Dependency": {
      "prefix": "fesgetdb",
      "body": [
          "def get_db():",
          "   db = SessionLocal()",
          "   try:",
          "       yield db",
          "   finally:",
          "       db.close()"
      ]
  },
  "Startup Event": {
      "prefix": "fesstup",
      "body": [
          "@app.on_event('startup')",
          "async def on_startup():",
          "    pass$0"
      ]
  },
  "Shutdown Event":{
      "prefix": "fesshdn",
      "body": [
          "@app.on_event('shutdown')",
          "async def on_shutdown():",
          "    pass$0"
      ]
  }
}